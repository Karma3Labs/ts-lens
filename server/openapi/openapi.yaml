openapi: 3.0.0
info:
  title: ts-lens
  description: ts-lens
  version: 0.0.3
servers:
  - url: "https://lens-api.k3l.io"
paths:
  /profile/score:
    get:
      summary: Display a user's profile score
      description: |
        Returns the global profile score of a user based on a strategy.
      operationId: getScore
      parameters:
        - $ref: "#/components/parameters/Strategy"
          required: true
        - $ref: "#/components/parameters/ProfileHandle"
          required: true
        - $ref: "#/components/parameters/Backdate"
      responses:
        200:
          description: Query succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  score:
                    type: number
                    format: double
                    description: |
                      The profile's score, between `0.0` and `1.0`.
                required:
                  - score
        400:
          $ref: "#/components/responses/HTTP400ErrorMessage"
        500:
          $ref: "#/components/responses/HTTP500ErrorMessage"
  /profile/scores_by_users:
    get:
      summary: All scores for a given list of users
      description: |
        Returns the global profile scores of a list of users, ordered by the
        highest scoring profiles, according to a given strategy.
      operationId: getScoresByusers
      parameters:
        - $ref: "#/components/parameters/Strategy"
          required: true
        - $ref: "#/components/parameters/ProfileHandles"
        - $ref: "#/components/parameters/Backdate"
      responses:
        200:
          description: Query succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Profile"
                description: |
                  The requested profiles along with their scores and ranks.
        400:
          $ref: "#/components/responses/HTTP400ErrorMessage"
        500:
          $ref: "#/components/responses/HTTP500ErrorMessage"
  /profile/scores:
    get:
      summary: Return a paginated list of all profile scores
      description: |
        Returns the global profile scores, ordered by the highest scoring profiles, 
        according to a given strategy.
      operationId: getScores
      parameters:
        - $ref: "#/components/parameters/Strategy"
          required: true
        - $ref: "#/components/parameters/PaginationOffset"
        - $ref: "#/components/parameters/PaginationLimit"
        - $ref: "#/components/parameters/Backdate"
      responses:
        200:
          description: Query succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Profile"
                description: |
                  The requested profiles, whose scores are
                  within the `[limit, limit+offset)` range.
        400:
          $ref: "#/components/responses/HTTP400ErrorMessage"
        500:
          $ref: "#/components/responses/HTTP500ErrorMessage"
  /profile/count:
    get:
      summary: Return the total population size of profiles scored
      description: |
        Returns the number of profiles available for a given strategy.

        As an example, this can be used to display the number of 
        pages on a paginated dashboard.
      operationId: getNumberOfProfiles
      parameters:
        - $ref: "#/components/parameters/Strategy"
          required: true
        - $ref: "#/components/parameters/Backdate"
      responses:
        200:
          description: Query succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: |
                      The number of ranking entries (with non-zero trust).
                required:
                  - count
        400:
          $ref: "#/components/responses/HTTP400ErrorMessage"
        500:
          $ref: "#/components/responses/HTTP500ErrorMessage"
  /profile/rank:
    get:
      summary: Provide the ranked position of a given profile
      description: |
        Retrieves a particular profile's position ranked in relations 
        to the result set of a strategy.
      operationId: getProfilePosition
      parameters:
        - $ref: "#/components/parameters/Strategy"
          required: true
        - $ref: "#/components/parameters/ProfileHandle"
          required: true
        - $ref: "#/components/parameters/Backdate"
      responses:
        200:
          description: Query succeeded.
          content:
            application/json:
              schema:
                type: object
                properties:
                  rank:
                    type: integer
                    description: The given profile's ranking (0 is the first place), based on the strategy specified.
                required:
                  - rank
        400:
          $ref: "#/components/responses/HTTP400ErrorMessage"
        500:
          $ref: "#/components/responses/HTTP500ErrorMessage"
  /feed:
    get:
      summary: Default non-personalized content feed
      description: |
        Returns a list of posts based on the default 'popular' strategy.
      operationId: getDefaultFeed
      parameters:
        - $ref: "#/components/parameters/PaginationLimit100"
        - $ref: "#/components/parameters/PaginationOffset"
        - $ref: "#/components/parameters/ContentFocusFilter"
        - $ref: "#/components/parameters/LanguageFilter"
        - $ref: "#/components/parameters/RankLimit"
      responses:
        200:
          description: Query succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
                description: |
                  The requested profiles, whose scores are
                  within the `[limit, limit+offset)` range.
        400:
          $ref: "#/components/responses/HTTP400ErrorMessage"
        500:
          $ref: "#/components/responses/HTTP500ErrorMessage"
  /feed/{strategy}:
    get:
      summary: Non-personalized content feed
      description: |
        Returns a list of posts based on a strategy that is not personalized.
      operationId: getFeed
      parameters:
        - $ref: "#/components/parameters/FeedStrategyPath"
        - $ref: "#/components/parameters/PaginationLimit100"
        - $ref: "#/components/parameters/PaginationOffset"
        - $ref: "#/components/parameters/ContentFocusFilter"
        - $ref: "#/components/parameters/LanguageFilter"
        - $ref: "#/components/parameters/RankLimit"
      responses:
        200:
          description: Query succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
                description: |
                  The requested profiles, whose scores are
                  within the `[limit, limit+offset)` range.
        400:
          $ref: "#/components/responses/HTTP400ErrorMessage"
        500:
          $ref: "#/components/responses/HTTP500ErrorMessage"
  /feed/personal/{profile}:
    get:
      summary: Default personalized content feed
      description: |
        Returns a list of posts based on the default 'following' strategy 
        personalized for the given profile.
      operationId: getDefaultPersonalFeed
      parameters:
        - $ref: "#/components/parameters/ProfilePath"
        - $ref: "#/components/parameters/PaginationLimit100"
        - $ref: "#/components/parameters/PaginationOffset"
        - $ref: "#/components/parameters/ContentFocusFilter"
        - $ref: "#/components/parameters/LanguageFilter"
        - $ref: "#/components/parameters/RankLimit"
      responses:
        200:
          description: Query succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
                description: |
                  The requested profiles, whose scores are
                  within the `[limit, limit+offset)` range.
        400:
          $ref: "#/components/responses/HTTP400ErrorMessage"
        500:
          $ref: "#/components/responses/HTTP500ErrorMessage"
  /feed/personal/{profile}/{strategy}:
    get:
      summary: Personalized content feed
      description: |
        Returns a list of posts based on a strategy that is personalized for the given profile.
      operationId: getPersonalFeed
      parameters:
        - $ref: "#/components/parameters/ProfilePath"
        - $ref: "#/components/parameters/PersonalFeedStrategyPath"
        - $ref: "#/components/parameters/PaginationLimit100"
        - $ref: "#/components/parameters/PaginationOffset"
        - $ref: "#/components/parameters/ContentFocusFilter"
        - $ref: "#/components/parameters/LanguageFilter"
        - $ref: "#/components/parameters/RankLimit"
      responses:
        200:
          description: Query succeeded.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Post"
                description: |
                  The requested profiles, whose scores are
                  within the `[limit, limit+offset)` range.
        400:
          $ref: "#/components/responses/HTTP400ErrorMessage"
        500:
          $ref: "#/components/responses/HTTP500ErrorMessage"
components:
  parameters:
    Strategy:
      name: strategy
      in: query
      schema:
        type: string
      description: The strategy name to use such as 'followship', 'engagement', 'influencer', or 'creator'.
    FeedStrategyPath:
      name: strategy
      in: path
      required: true
      schema:
        type: string
        enum: [recent, popular, recommended, crowdsourced]
      description: The strategy name to use such as 'recent', 'popular', 'recommended', or 'crowdsourced'.
    PersonalFeedStrategyPath:
      name: strategy
      in: path
      required: true
      schema:
        type: string
        enum: [following]
      description: The strategy name to use such as 'following'.
    ProfileHandle:
      name: handle
      in: query
      schema:
        type: string
      description: The Lens profile handle (with or without the `.lens` extension).
    ProfileHandles:
      name: handles
      in: query
      schema:
        type: string
      description: A list of comma separated profile handles (with or without the `.lens` extension).
    ProfilePath:
      name: profile
      in: path
      required: true
      schema:
        type: string
      description: The Lens profile handle (with or without the `.lens` extension) or hex Id.
    ContentFocusFilter:
      name: contentFocus
      in: query
      schema:
        type: array
        items:
          type: string
          enum: [text_only, article, audio, video, image, link]
      description: The content focus that the posts should be filtered on.
    LanguageFilter:
      name: language
      in: query
      schema:
        type: string
      description: The language of the posts to be retrieved.
    PaginationOffset:
      name: offset
      in: query
      schema:
        type: integer
      description: Return results starting from this offset position. Defaults to start at `0`, the first result.
    PaginationLimit:
      name: limit
      in: query
      schema:
        type: integer
      description: Number of entries to return.  Defaults to `50`.
    PaginationLimit100:
      name: limit
      in: query
      schema:
        type: integer
      description: Number of entries to return.  Defaults to `100`.
    RankLimit:
      name: rankLimit
      in: query
      schema:
        type: integer
      description: Limite to top N ranked profiles.  Defaults to `10000`.
    Backdate:
      name: date
      in: query
      schema:
        type: string
      description: |
        A date, in `YYYY-MM-DD` format, for which to return the historic result.  Defaults to the most recent date.
  responses:
    HTTP400ErrorMessage:
      description: |
        Invalid request, ex: wrong parameters.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
    HTTP500ErrorMessage:
      description: |
        Internal server error, not caused by issues with the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
  schemas:
    ErrorMessage:
      description: A human-readable error message.
      type: string
    Profile:
      description: A user profile.
      type: object
      properties:
        id:
          oneOf:
            - type: integer
            - type: string
          description: Lens profile ID
        handle:
          type: string
          description: Lens profile handle.
        followersCount:
          type: integer
          description: Number of followers.
        score:
          type: number
          description: Profile score of a user, ranges from 0 to 1
        rank:
          type: integer
          description: Ranking of a user (0 is the first place).
      required:
        - id
        - handle
        - followersCount
      examples:
        - id: 0x5
          handle: stani.lens
          followersCount: 49371
          score: 0.06392881
          rank: 0
        - id: 0x24
          handle: bradorbradley.lens
          followersCount: 813
          score: 0.056683067
          rank: 1
        - id: 0x16264
          handle: ryanfox.lens
          followersCount: 813
          score: 0.05656492
          rank: 2
    Post:
      description: A post by user.
      type: object
      properties:
        postId:
          type: string
          description: Lens Post ID
        handle:
          type: string
          description: Lens profile handle.
        mirrorsCount:
          type: integer
          description: Number of mirrors.
        commentsCount:
          type: integer
          description: Number of comments.
        collectsCount:
          type: integer
          description: Number of collects.
        upvotesCount:
          type: integer
          description: Number of upvotes.
        v:
          type: number
          format: float
          description: The internal score generated by the strategy for the post.
        createdAt:
          type: string
          format: date-time
          description: Block timestamp of when the post was created.
        contentUri:
          type: string
          description: URI where the post content is stored.
      required:
        - postId
      examples:
        - postId: 0x05-0x1e5a-DA-76b7ad36
          handle: stani.lens
          mirrorsCount: 0
          commentsCount: 10
          collectsCount: 0
          upvotesCount: 57
          v: 0.8563457328149917
          createdAt: 2023-06-13T17:38:04.000Z
          contentUri: 'ar://-aYLr71AMyMnjtvjq0daDWDg3SrDytTWPMd4GMw8W98'
        - postId: 0x8e-0x0b63-DA-b3c22037
          handle: christina.lens
          mirrorsCount: 1
          commentsCount: 0
          collectsCount: 0
          upvotesCount: 53
          v: 0.5692248264518938
          createdAt: 2023-06-13T14:24:20.000Z
          contentUri: 'ar://ecOcywtirkZFm6O3SJQNIvUtFj6As9VTnMMaXIUw2WM'